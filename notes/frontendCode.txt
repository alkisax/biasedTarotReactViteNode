Full front end code

import 'bootstrap/dist/css/bootstrap.min.css'; // Ensure Bootstrap is imported

const TarotCard = ({ position, index, mapCardToImage }) => (
  <div className="col-3 text-center">
    <h5>{position} Card</h5>
    <img
      src={mapCardToImage(index)}  // Pass the index to mapCardToImage
      alt={`Card ${position}`}
      className="img-fluid rounded"
    />
  </div>
);

const CardImages = ({ drawnCards, mapCardToImage }) => {
  if (!drawnCards || drawnCards.length < 3) {
    return <p>Error: Not enough cards drawn.</p>;
  }

  return (
    <div className="container mt-4">
      <h2 className="text-center mb-4">Drawn Tarot Cards</h2>
      <div className="row justify-content-center">
        {/* Pass the index of the drawn card */}
        <TarotCard position="First" index={drawnCards.first} mapCardToImage={mapCardToImage} />
        <TarotCard position="Second" index={drawnCards.second} mapCardToImage={mapCardToImage} />
        <TarotCard position="Third" index={drawnCards.third} mapCardToImage={mapCardToImage} />
      </div>
    </div>
  );
};

export default CardImages;

import { useState } from "react";
import 'bootstrap/dist/css/bootstrap.min.css';

const InnerSettings = ({ setBias }) => {
  const [newBias, setNewBias] = useState('the answer will include the topic');
  const [selectedBias, setSelectedBias] = useState('');

  const handleBiasChange = (event) => {
    const value = event.target.value;
    setSelectedBias(value); // Track selected radio button

    if (value === 'good') {
      setBias('the answer will give ONLY good and optimistic results');
    } else if (value === 'bad') {
      setBias('the answer will give ONLY bad and pessimistic results');
    } else if (value === 'custom') {
      setBias(''); // Reset bias when custom is selected
    } else if (value === 'neutral') {
      setBias('')
    }
  };

  const handleCustomBiasChange = (event) => {
    setNewBias(event.target.value);
  };

  const handleSubmitCustomBias = (event) => {
    event.preventDefault();
    // Submit the custom bias with the prefix only once
    setBias(`the answer will include the topic: ${newBias.replace(/^the answer will include the topic\s*/, '')}`);
  };

  return (
    <div>
      <h3>Settings</h3>
      <div>
        <h4>Set Bias</h4>
        <div className="form-check form-check-inline">
          <input
            type="radio"
            id="good"
            name="bias"
            value="good"
            className="form-check-input"
            onChange={handleBiasChange}
            checked={selectedBias === 'good'}
          />
          <label htmlFor="good" className="form-check-label">G</label>
        </div>

        <div className="form-check form-check-inline">
          <input
            type="radio"
            id="bad"
            name="bias"
            value="bad"
            className="form-check-input"
            onChange={handleBiasChange}
            checked={selectedBias === 'bad'}
          />
          <label htmlFor="bad" className="form-check-label">B</label>
        </div>

        <div className="form-check form-check-inline">
          <input
            type="radio"
            id="neutral"
            name="bias"
            value="neutral"
            className="form-check-input"
            onChange={handleBiasChange}
            checked={selectedBias === 'neutral'}
          />
          <label htmlFor="neutral" className="form-check-label">Neutral</label>
        </div>

        <div className="form-check form-check-inline">
          <input
            type="radio"
            id="custom"
            name="bias"
            value="custom"
            className="form-check-input"
            onChange={handleBiasChange}
            checked={selectedBias === 'custom'}
          />
          <label htmlFor="custom" className="form-check-label">Custom</label>
        </div>

        {/* Only show the custom input when the "custom" option is selected */}
        {selectedBias === 'custom' && (
          <div>
            <textarea
              type="text"
              value={newBias}
              onChange={handleCustomBiasChange}
              className="form-control mt-2"
              placeholder="Type custom bias"
              rows={3}
            />
            <button
              onClick={handleSubmitCustomBias}
              className="btn btn-primary mt-2"
            >
              Submit Custom Bias
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default InnerSettings;


import 'bootstrap/dist/css/bootstrap.min.css';

import { useState } from "react";

const Language = ({ lang, setLang }) => {
  const [ selectedLang, setSelectedLang ] = useState(lang)

  const handleLangChange = (event) => {
    const value = event.target.value;
    setSelectedLang(value); 
    if (value === 'gr') {
      setLang('gr');
    } else {
      setLang('el');
    } 
  };

  return (
    <div className="mb-3 d-flex justify-content-lg-start">
      <div className="form-check form-check-inline" >
        <input
          type="radio"
          id="en"
          name="lang"
          value="en"
          onChange={handleLangChange}
          checked={selectedLang === 'en'}
        />
        <label htmlFor="en" className="form-check-label"><img src="/images/small_Flag_of_Liberia.png" style={{ height: '1em', marginRight: '8px' }} />english </label>
      </div>

      <div className="form-check form-check-inline" >
        <input
          type="radio"
          id="gr"
          name="lang"
          value="gr"
          onChange={handleLangChange}
          checked={selectedLang === 'gr'}
        />
        <label htmlFor="gr" className="form-check-label"><img src="/images/small_Cretan_State.png" style={{ height: '1em', marginRight: '8px' }} />greek</label>
      </div> 
    </div>
  )
}
export default Language

import 'bootstrap/dist/css/bootstrap.min.css';
const Question = ({ newQuestion, handleQuestionChange, addquestion }) => {
  return (
    <div className="mb-4">
      <h4 className="mb-3">Ask a Question:</h4>
      <form onSubmit={addquestion} className="d-flex align-items-center">
        <input
          type="text"
          value={newQuestion}
          onChange={handleQuestionChange}
          className="form-control me-2" // Adds padding and some margin
          placeholder="Type your question here"
        />
        <button type="submit" className="btn btn-primary">Submit</button>
      </form>
    </div>
  );
};

export default Question;

import 'bootstrap/dist/css/bootstrap.min.css';
import InnerSettings from "./InnerSettings";
import { useState } from "react";

const Settings = ({ setBias }) => {
  const password = 'settings'
  const [ newPasword, setNewPassword] = useState('')
  const [ isPassed, setIsPassed ] = useState(false)

  const handlePassChange = (event) => {
    console.log(event.target.value)
    setNewPassword(event.target.value)
  }
  const checkPass = (event) => {
    event.preventDefault()
    if (newPasword === password) {
      setIsPassed(true)
    }
    setNewPassword('')
  }

  return(
    <div>
      {isPassed ? (
        <div>
          <InnerSettings setBias={setBias} />
        </div>
      ) : (
        <div className="mb-3">
          <h4 className="mb-2" style={{ fontSize: '0.7rem' }}>Password for settings:</h4>
          <form onSubmit={checkPass} className="d-flex align-items-center">
            <input
              type="text"
              value={newPasword}
              onChange={handlePassChange}
              className="form-control me-1 p-1" // More reduced padding and margin
              placeholder="Enter settings password"
              style={{ fontSize: '0.65rem' }} // Smaller input text
            />
            <button type="submit" className="btn btn-primary" style={{ fontSize: '0.75rem', padding: '0.25rem 0.5rem' }}>Submit</button> 
          </form>
        </div>
      )}

    </div>
  )
}

export default Settings

import { Link } from 'react-router-dom';

// Function to map card index to image path
const mapCardToImage = (cardIndex) => {
  return `/deck1/${cardIndex}.jpg`; // Path to the image using the card index
};

const Deck1btn = () => {
  return (
    <div>
      <h1>Deck1 Page</h1>
      <Link to="/">
        <button>Go to Home</button>
      </Link>
    </div>
  );
};

const Deck1 = () => {
  const imageCount = 78; // Update this to the number of images you have in the /deck1 folder

  // Generate an array with card indices from 0 to imageCount-1
  const cardIndexes = Array.from({ length: imageCount }, (_, index) => index);

  return (
    <div>
      <h1>This is the Deck1 Page</h1>
      <Deck1btn />
      
      <div className="image-gallery">
        {cardIndexes.map((index) => (
          <img
            key={index}
            src={mapCardToImage(index)}
            alt={`Card ${index}`}
            style={{ width: '100px', margin: '5px' }} // You can adjust the styling
          />
        ))}
      </div>
    </div>
  );
};

export default Deck1;


import { useState, useEffect } from "react";
import 'bootstrap/dist/css/bootstrap.min.css'; // Ensure Bootstrap is imported
import axios from "axios";
import CardImages from "../components/cardImages";
import Question from "../components/Question";
import Settings from "../components/Settings"
import Language from "../components/Language"

import { Link } from 'react-router-dom';

const Home = () => {
  const [ gptResponse, setGptResponse ] = useState("");
  const [ loading, setLoading ] = useState(false);
  const [ error, setError ] = useState("");
  const [ selectedCards, setSelectedCards ] = useState([]);
  const [ drawnCards, setDrawnCards ] = useState({ first: null, second: null,third: null });
  const [ newQuestion, setNewQuestion ] = useState('')
  const [ question, setQuestion ] = useState('')
  const [ bias, setBias ] = useState('');
  const [ lang, setLang ] = useState('en')
  
  // const [ viewDeck, setViewDeck ] = useState(false)

  useEffect(() => {
    if (question) {
      axios
      .get("https://biasedtarot.onrender.com/test-openai", {
        params: { userQuestion: question, bias: bias, lang: lang }
      }) // Adjust if your backend is hosted elsewhere
      .then((response) => {
        setDrawnCards(response.data.drawnCards);
        setSelectedCards(response.data.selectedCards);
        setGptResponse(response.data.gptResponse);
        setLoading(false);
      })
      .catch((error) => {
        console.error("Error fetching response:", error); // Logs error to console
        setError("Failed to fetch Tarot reading.");
        setLoading(false);
      });
    }
  }, [question, bias, lang]);

  useEffect(() => {
    if (drawnCards.length > 0) {
      // This effect will run whenever `drawnCards` is updated
      console.log("drawnCards", drawnCards);
      console.log("selectedCards", selectedCards);
    }
  }, [drawnCards, selectedCards]);  

  // Function to map card indices to image paths
  const mapCardToImage = (cardIndex) => {
    return `/deck1/${cardIndex}.jpg`; // Path to the image using the card index
  };

  const parseResponse = () => {
    const cleanResponse = gptResponse.replace(/<\/?pre>/g, ""); // Remove <pre> and </pre> tags
    return cleanResponse.split("\n").map((line, index) => (
      <p key={index}>{line}</p>
    ));
  };

  const reschafle = () => {
    window.location.reload();
  };

  const handleQuestionChange = (event) => {
    console.log(event.target.value)
    setNewQuestion(event.target.value)
  }

  const handleShowDeck = () => {
    // setViewDeck(prevState => !prevState);
  }

  const addquestion = (event) => {
    event.preventDefault()
    setLoading(true)
    setQuestion(newQuestion)
    setNewQuestion('')
  }

  document.body.classList.add('bg-dark');

  return (
    <div className="min-vh-100 d-flex justify-content-center align-items-center bg-dark text-white">

      <div className="container d-flex flex-column justify-content-center align-items-center py-4">

        <div>
            <Language lang={lang} setLang={setLang} />
        </div>


        <div className="d-flex justify-content-center row">
          <div className="text-center mb-4 col-4 d-flex align-items-stretch">
            <Link to="/deck1">
              <button onClick={handleShowDeck} className="btn btn-light">Show Deck</button>
            </Link>
          </div>
          <div className="col-1"></div>
          <div className="text-center mb-4 col-4 d-flex align-items-stretch">
            <button onClick={reschafle} className="btn btn-light ml-3">Reshuffle</button>
          </div>
        </div>

        <div className="viewDeck {}" id="viewDeck" >
        </div>

        <div className="viewQuestion" id="viewQuestion" >
          <Question newQuestion={newQuestion} handleQuestionChange={handleQuestionChange} addquestion={addquestion} />
    
        <div>
          <h1 className="mb-4">Tarot Reading</h1>
          {loading ? (
            <p>Loading...</p> // Display loading message only while waiting for response
          ) : error ? (
            <p style={{ color: "red" }}>{error}</p> // Display error message
          ) : question ? ( 
            // Only show results if a question has been submitted
            <div>
              <CardImages drawnCards={drawnCards} mapCardToImage={mapCardToImage} />
              <div>{parseResponse()}</div>
            </div>
          ) : (
            <br />
          )} {/* Show nothing if no question has been submitted */}
        </div>

        </div>

        <div>
          <Settings setBias={setBias} />

          {bias && (
            <p>Selected Bias: {bias}</p>
          )}

        </div>

      </div>
    </div>
  );
};

export default Home;


import { RouterProvider, createBrowserRouter } from 'react-router-dom';
import Home from './pages/Home';
import Deck1 from './pages/Deck1';

const router = createBrowserRouter([
  {
    path: "/",
    element: <Home />,
  },
  {
    path: "/deck1",
    element: <Deck1 />,
  }
]);

const App = () => {
  return (
      <RouterProvider router={router} />
  );
}
export default App;

import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
// import App from './pages/Home.jsx'
import App from './App'

// import { BrowserRouter } from 'react-router-dom';

const rootElement = document.getElementById('root');
if (rootElement) {
  createRoot(document.getElementById('root')).render(
    <StrictMode>
      {/* <BrowserRouter> */}
          <App />
      {/* </BrowserRouter> */}
    </StrictMode>,
  )
} else {
  console.error("Root element not found.");
}



