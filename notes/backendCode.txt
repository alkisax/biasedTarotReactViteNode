const majorArcana = [
  "The Fool",
  "The Magician",
  "The High Priestess",
  "The Empress",
  "The Emperor",
  "The Hierophant",
  "The Lovers",
  "The Chariot",
  "Strength",
  "The Hermit",
  "Wheel of Fortune",
  "Justice",
  "The Hanged Man",
  "Death",
  "Temperance",
  "The Devil",
  "The Tower",
  "The Star",
  "The Moon",
  "The Sun",
  "Judgement",
  "The World"
];
const wands = [
  "Ace of Wands",
  "Two of Wands",
  "Three of Wands",
  "Four of Wands",
  "Five of Wands",
  "Six of Wands",
  "Seven of Wands",
  "Eight of Wands",
  "Nine of Wands",
  "Ten of Wands",
  "Page of Wands",
  "Knight of Wands",
  "Queen of Wands",
  "King of Wands"
];
const cups = [
  "Ace of Cups",
  "Two of Cups",
  "Three of Cups",
  "Four of Cups",
  "Five of Cups",
  "Six of Cups",
  "Seven of Cups",
  "Eight of Cups",
  "Nine of Cups",
  "Ten of Cups",
  "Page of Cups",
  "Knight of Cups",
  "Queen of Cups",
  "King of Cups"
];
const swords = [
  "Ace of Swords",
  "Two of Swords",
  "Three of Swords",
  "Four of Swords",
  "Five of Swords",
  "Six of Swords",
  "Seven of Swords",
  "Eight of Swords",
  "Nine of Swords",
  "Ten of Swords",
  "Page of Swords",
  "Knight of Swords",
  "Queen of Swords",
  "King of Swords"
];
const pentacles = [
  "Ace of Pentacles",
  "Two of Pentacles",
  "Three of Pentacles",
  "Four of Pentacles",
  "Five of Pentacles",
  "Six of Pentacles",
  "Seven of Pentacles",
  "Eight of Pentacles",
  "Nine of Pentacles",
  "Ten of Pentacles",
  "Page of Pentacles",
  "Knight of Pentacles",
  "Queen of Pentacles",
  "King of Pentacles"
];

const tarotDeck = [
  ...majorArcana,
  ...cups,
  ...pentacles,
  ...swords,
  ...wands,
];


const random = () => {
  return Math.floor(Math.random() * 78); // 78 to include 77 in the range
};

const draw = () => {
  const first = random();
  let second = random();
  while (second === first) {
    second = random();
  }

  let third = random();
  while (third === first || third === second) {
    third = random();
  }
  return {
    first: first,
    second: second,
    third: third
  };
};

const drawnCards = draw()

// console.log(`
//   draw:
//   first: ${tarotDeck[drawnCards.first]}
//   second: ${tarotDeck[drawnCards.second]}
//   third: ${tarotDeck[drawnCards.third]}
//   `);

  module.exports = { tarotDeck, draw };

  const axios = require('axios');
const { tarotDeck, draw } = require('./tarotLogic/tarotCards');

const getTarotReading = (userQuestion, apiKey, bias, lang) => {

  // Draw three unique tarot cards
  const drawnCards = draw();

  console.log(`
    draw:
    first: ${tarotDeck[drawnCards.first]}
    second: ${tarotDeck[drawnCards.second]}
    third: ${tarotDeck[drawnCards.third]}
    `);

  // Format the selected cards
  const selectedCards = [
      tarotDeck[drawnCards.first],
      tarotDeck[drawnCards.second],
      tarotDeck[drawnCards.third]
  ];

  const tarot_prompt = lang === 'en' 
  ? "You are a Tarot interpreter. Provide a detailed interpretation of the following Tarot cards in direct response to the question asked. For each card, describe its meaning thoroughly and explain its relevance to the question. After interpreting each card individually, provide a combined interpretation that synthesizes the meanings of all the cards in relation to the question asked. Avoid any introductory or contextual information, and focus solely on delivering a profound and insightful analysis of the individual cards and their combined significance. Do not refer to yourself or anything outside of the Tarot cards and their meanings." 
  : "Είσαι ερμηνευτής Ταρώ. Παρέχετε μια λεπτομερή ερμηνεία των παρακάτω καρτών Ταρώ σε άμεση απάντηση στην ερώτηση που τέθηκε. Για κάθε κάρτα, περιγράψτε λεπτομερώς τη σημασία της και εξηγήστε τη συνάφειά της με την ερώτηση. Μετά την ερμηνεία κάθε κάρτας ξεχωριστά, παρέχετε μια συνδυασμένη ερμηνεία που συνθέτει τις έννοιες όλων των καρτών σε σχέση με την ερώτηση που τέθηκε. Αποφύγετε οποιαδήποτε εισαγωγική ή συμφραζόμενη πληροφορία και εστιάστε αποκλειστικά στην παροχή μιας βαθιάς και διορατικής ανάλυσης των μεμονωμένων καρτών και της συνδυασμένης τους σημασίας. Μην αναφέρεστε στον εαυτό σας ή σε οτιδήποτε εκτός από τις κάρτες Ταρώ και τις έννοιές τους.";

  // Construct the full message for GPT-4
  const fullPrompt = `${tarot_prompt} 
  Question: ${userQuestion} 
  Drawn Cards: ${selectedCards.join(', ')} 
  Bias: ${bias || 'None'}`;

  console.log("fullPrompt: ", fullPrompt);
  

  const url = 'https://api.openai.com/v1/chat/completions';
  
  return axios.post(url, {
    model: 'gpt-3.5-turbo',
    messages: [{ role: 'user', content: fullPrompt }],
  }, {
    headers: {
      'Authorization': `Bearer ${apiKey}`,
      'Content-Type': 'application/json',
    },
  })
    .then(response => {
      const message = response.data.choices[0].message.content;
      return {
        drawnCards,
        selectedCards,
        gptResponse: message,
      };
    })
    .catch(error => {
      throw new Error(`Error fetching GPT-4 response: ${error.message}`);
    });
};

module.exports = { getTarotReading };

require('dotenv').config();
const mongoose = require('mongoose')
const cors = require("cors");
const express = require('express');
const app = express();
const morgan = require('morgan');
app.use(express.json());
app.use(cors()); // Allow all origins
app.use(morgan('dev'));
app.use(express.static('dist')) // to create static render for dist, on the server

// MongoDb start here
const mongoURI = process.env.MONGODB_URI;
mongoose.set('strictQuery',false)
mongoose.connect(mongoURI)
  .then(() => {
    console.log('MongoDB connected successfully');
  })
const querySchema = new mongoose.Schema({
  message: String,
  bias: String,
})
const Query = mongoose.model('Query', querySchema)
//

const { getTarotReading } = require('./GPTLogic');

const apiKey = process.env.OPENAI_API_KEY;
console.log("Starting");

app.get('/api/test-mongoDB/', (req, res) => {
  Query.find({})
    .then(questions => {
      res.json(questions)
    })
})

// app.get('/deck', (req, res) => {

// })

app.get('/test-openai', (req, res) => {
  const userQuestion = req.query.userQuestion || "What do I need to know today?"; // Default question if not provided
  const bias = req.query.bias;
  const lang = req.query.lang;

  if (!apiKey) {
    return res.status(500).json({ error: 'Missing OpenAI API key' });
  }

  getTarotReading(userQuestion, apiKey, bias)
    .then(result => {
      res.json({
        drawnCards: result.drawnCards,
        selectedCards: result.selectedCards,
        gptResponse: result.gptResponse,
      });      
      //mongoDB
      const query = new Query({
        message: userQuestion,
        bias: bias
      })

      query.save().then(result => {
        mongoose.connection.close()
      })
    })
    .catch(error => {
      console.error(error);
      res.status(500).json({ error: error.message });
    });
});

// Catch-all route for unknown endpoints (404)
const unknownEndpoint = (request, response) => {
  response.status(404).send({ error: 'unknown endpoint' });
};
// Error handling middleware (MUST be the last middleware)
const errorHandler = (error, request, response, next) => {
  console.error(error.message); // Log error message
  if (error.name === 'CastError') {
    return response.status(400).json({ error: 'malformatted id' });
  }
  // If error is not a CastError, pass it to the default Express error handler
  next(error);
};
// Add unknown endpoint middleware before the error handler
app.use(unknownEndpoint);
// Add the error handler as the last middleware
app.use(errorHandler);


const PORT = process.env.PORT
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`)
})
